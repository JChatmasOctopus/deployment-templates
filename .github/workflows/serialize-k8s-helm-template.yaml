name: Serialize K8s Helm Template
'on':
  workflow_dispatch: {}
#  push:
#    paths:
#      - '.octopus/templates/k8s-helm-template/*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
      - name: Serialize Project
        run: |
          mkdir -p projects/k8s-helm/template
          docker run -v $(pwd)/projects/k8s-helm/template:/tmp/octoexport --rm ghcr.io/octopussolutionsengineering/octoterra \
              -url https://demo.octopus.app \
              -space Spaces-2165 \
              -apiKey ${{ secrets.OCTOPUS_APIKEY }} \
              -projectName "K8s Helm Template" \
              -lookupProjectDependencies \
              -ignoreCacManagedValues=false \
              -excludeCaCProjectSettings=true \
              -terraformBackend s3 \
              -dest /tmp/octoexport
        shell: bash
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Create / Update projects
        run: |
          for dir in $(pwd)/projects/k8s-helm/*/     # list directories in the form "/tmp/dirname/"
          do
            # Remove the trailing slash
            dir=${dir%*/}
            # The directory name becomes the project name
            project=${dir##*/}
          
            # We don't process the template directory
            if [[ $project != "template" ]]; then
              echo "Processing project: $project"
              
              pushd "$dir" || exit
              # Init the terraform backend, passing in the backend config values
              terraform init -backend-config="bucket=octopus-primerica-tf-state" -backend-config="region=us-east-1" -backend-config="key=K8sHelm"
              # Each project is managed in it's own workspace
              terraform workspace select -or-create "${project}"
              # Apply the terraform configuration, passing in the octopus details
              terraform apply -auto-approve \
              -var=octopus_server=https://demo.octopus.app \
              -var=octopus_apikey=${{ secrets.OCTOPUS_APIKEY }} \
              -var=octopus_space_id=Spaces-2165 \
              -var=project_name="${project}"
              popd || exit
            fi
          done
        shell: bash